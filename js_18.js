//다시 기본기, 그리고 객체의 양면
//하지만 객체가 완벽한가 라고 다면 그렇지는 않습니다. '규격'은 다를 수록 '규격'의 본질을 잃는 수순을 밟게 되므로 객체가 하나의 규격으로서 사용될 때는 이러한 변화,변동성이 하나의 걸림돌이 됩니다.
//본 예제는 '정적(static)'인 리터럴 형식으로 초기화(initialize) 한 임의의 객체를 '동적(dynamic)'으로 수정한 사례입니다. 물론, 변할 여지가 충분한 데이터를 상정해두었다면 문제가 되지 않겠지만, 이러한 코드가 10000라인이 넘어가면(코드 규모를 Line of code, LOC라고들 부릅니다) 감당 못할 유지보수의 큰 문제점으로 남게 됩니다.
//이러한 성질을 변하는, 변하기 쉬운(mutable) 성질이라고 하는데, 특히 개발자와 같이 미리 확정(선언)해두고 사용하거나 여러명이 일련의 약속을 두고 작업하는 등 여러가지 상황에서는 이러한 유연함이 방해요소, 예기치 못한 에러등 부작용으로 다가옵니다. 다른 언어에서는 이러한 것을 제한 하는 방식을 작성법 측면에서 채택하고 있지만, 자바스크립트 그 자체로는 굳이 setter의 형태를 사용하거나 아래와 같이 .freeze() '얼린다'라는 메서드를 통해서야 겨우 불변(immutable)한 형태 비슷하게 만들 수 있습니다. 형식적으로나마 고정하지 않으면,  delete와 같은 키워드를 사용하여 자칫 프로퍼티 하나 전체를 삭제 처리할 수도 있게 됩니다. 

//객체 '정적(static)' 리터럴 작성
const KDTMinam = {
  name:"원빈",
  age: 30,
  eamil: "onlyOneBean@gamil.com",
  another:"금이빨빼고"
};
//객체 '동적(dynamic)' 리터럴 작성
KDTMinam.name = 'kongukjae';
KDTMinam.age = 20;
KDTMinam.email = 'kongukjae@gmail.com';
//객체 '동적(dynamic)' 리터럴 삭제
delete KDTMinam.another;
//객체 .freeze() 메소드로 객체 '동적(dynamic)' 리터럴 작성 금지
KDTMinam.freeze();
